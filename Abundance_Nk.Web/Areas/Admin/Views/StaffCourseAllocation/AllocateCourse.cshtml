@model Abundance_Nk.Web.Areas.Admin.ViewModels.StaffCourseAllocationViewModel
@{
    ViewBag.Title = "StaffCourseAllocation";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}
@if (TempData["Message"] != null)
{
    @Html.Partial("_Message", (Abundance_Nk.Model.Model.Message)TempData["Message"])
}

<script src="~/Scripts/jquery-1.11.1.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {


        if ($("#DepartmentOption").val() > 0) {
            $("#Option").show();
        } else {
            $("#Option").hide();
        }

        function populateCourses() {
            $("#Course").empty();
            var values = new Array();
            //vals = [$("#Department").val(), $("#Level").val(), $("#Semester").val()];
            values[0] = $("#Department").val();
            values[1] = $("#Level").val();
            values[2] = $("#Semester").val();
            values[3] = $("#Programme").val();
            values[4] = $("#DepartmentOption").val();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetCourses", "StaffCourseAllocation")', // Calling json method
                traditional: true,
                data: { ids: values },
                // Get Selected Country ID.
                success: function (courses) {

                    $.each(courses, function (i, course) {
                        $("#Course").append('<option value="' + course.Value + '">' +
                             course.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve courses.' + ex);
                }
            });

        }
        //Programme Drop down Selected-change event
        $("#Programme").change(function () {
            if ($("#Department").val() > 0 && $("#Level").val() > 0 && $("#Semester").val() > 0) {
                populateCourses();
            }
            $("#Department").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetDepartments", "StaffCourseAllocation")', // Calling json method
                dataType: 'json',
                data: { id: $("#Programme").val() },
                // Get Selected Country ID.
                success: function (departments) {
                    $("#Department").append('<option value="' + 0 + '">' +
                            '-- Select Department --' + '</option>');
                    $.each(departments, function (i, department) {
                        $("#Department").append('<option value="' + department.Value + '">' +
                             department.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve departments.' + ex);
                }
            });
            return false;
        })
        //Session Drop down Selected change event
        $("#Session").change(function () {
            if ($("#Department").val() > 0 && $("#Level").val() > 0 && $("#Semester").val() > 0) {
                populateCourses();
            }

            $("#Semester").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetSemester", "StaffCourseAllocation")', // Calling json method
                dataType: 'json',
                data: { id: $("#Session").val() },
                // Get Selected Country ID.
                success: function (semesters) {
                    $("#Semester").append('<option value="' + 0 + '">' +
                           '-- Select Semester --' + '</option>');
                    $.each(semesters, function (i, semester) {
                        $("#Semester").append('<option value="' + semester.Value + '">' +
                             semester.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve semesters.' + ex);
                }
            });
            return false;
        })

        $("#Department").change(function () {
            if ($("#Department").val() > 0 && $("#Level").val() > 0 && $("#Semester").val() > 0) {
                populateCourses();
            }
            $("#DepartmentOption").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetDepartmentOptions", "Support")', // Calling json method
                dataType: 'json',
                data: { ProgId: $("#Programme").val(), DeptId: $("#Department").val() },
                // Get Selected Country ID.
                success: function (departmentOptions) {

                    if (departmentOptions == "" || departmentOptions == null || departmentOptions == undefined) {
                        $("#Option").hide();
                    } else {
                        $("#DepartmentOption").append('<option value="' + 0 + '">' +
                             '-- Select Department Option --' + '</option>');
                        $.each(departmentOptions, function (i, departmentOption) {
                            $("#DepartmentOption").append('<option value="' + departmentOption.Value + '">' +
                                 departmentOption.Text + '</option>');
                        });
                        if ($("#Programme").val() > 2) {
                            $("#Option").show();
                        }
                    }
                },
                error: function (ex) {
                    alert('Failed to retrieve department options.' + ex);
                }
            });
            return false;
        })

        $("#Department").change(function () {
            if ($("#Department").val() > 0 && $("#Level").val() > 0 && $("#Semester").val() > 0) {
                populateCourses();
            }
        });
        $("#DepartmentOption").change(function () {
            if ($("#Department").val() > 0 && $("#Level").val() > 0 && $("#Semester").val() > 0) {
                populateCourses();
            }
        });
        $("#Session").change(function () {
            if ($("#Department").val() > 0 && $("#Level").val() > 0 && $("#Semester").val() > 0) {
                populateCourses();
            }
        });
        $("#Level").change(function () {
            if ($("#Department").val() > 0 && $("#Level").val() > 0 && $("#Semester").val() > 0) {
                populateCourses();
            }

        });




    });
</script>

@using (Html.BeginForm("AllocateCourse", "StaffCourseAllocation", new { area = "Admin" }, FormMethod.Post))
{
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title"><i class="fa fa-fw fa-toggle-left"></i>Allocate Course</h3>
        </div>
        <div class="panel-body">

            <div class="form-group">
                @Html.LabelFor(model => model.CourseAllocation.Session.Name, "Session", new { @class = "col-sm-2 control-label " })
                <div class="col-sm-10">
                    @Html.DropDownListFor(model => model.CourseAllocation.Session.Id, (IEnumerable<SelectListItem>)ViewBag.Session, new { @class = "searchable-dropdown-class form-control", @id = "Session", @required = "required" })
                    @Html.ValidationMessageFor(model => model.CourseAllocation.Session.Id, null, new { @class = "text-danger" })
                </div>

            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CourseAllocation.Semester.Name, "Semester", new { @class = "col-sm-2 control-label " })
                <div class="col-sm-10">
                    @Html.DropDownListFor(model => model.CourseAllocation.Semester.Id, (IEnumerable<SelectListItem>)ViewBag.Semester, new { @class = "form-control", @id = "Semester", @required = "required" })
                    @Html.ValidationMessageFor(model => model.CourseAllocation.Semester.Id, null, new { @class = "text-danger" })
                </div>

            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CourseAllocation.Programme.Name, "Programme", new { @class = "col-sm-2 control-label " })
                <div class="col-sm-10">
                    @Html.DropDownListFor(model => model.CourseAllocation.Programme.Id, (IEnumerable<SelectListItem>)ViewBag.Programme, new { @class = "searchable-dropdown-class form-control", @id = "Programme", @required = "required" })
                    @Html.ValidationMessageFor(model => model.CourseAllocation.Programme.Id, null, new { @class = "text-danger" })
                </div>

            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CourseAllocation.Department.Name, "Department", new {@class = "col-sm-2 control-label "})
                <div class="col-sm-10">
                    @Html.DropDownListFor(model => model.CourseAllocation.Department.Id, (IEnumerable<SelectListItem>) ViewBag.Department, new {@class = "searchable-dropdown-class form-control", @id = "Department", @required = "required"})
                    @Html.ValidationMessageFor(model => model.CourseAllocation.Department.Id, null, new {@class = "text-danger"})
                </div>

            </div>

            <div id="Option" class="form-group">
                @Html.LabelFor(model => model.DepartmentOption.Name, "Department Option", new { @class = "col-sm-2 control-label " })
                <div class="col-sm-10">
                    @Html.DropDownListFor(model => model.DepartmentOption.Id, (IEnumerable<SelectListItem>)ViewBag.DepartmentOptions, new { @class = "searchable-dropdown-class form-control", @id = "DepartmentOption" })
                    @Html.ValidationMessageFor(model => model.DepartmentOption.Id, null, new { @class = "text-danger" })
                </div>

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CourseAllocation.Level.Name, "Level", new { @class = "col-sm-2 control-label " })
                <div class="col-sm-10">
                    @Html.DropDownListFor(model => model.CourseAllocation.Level.Id, (IEnumerable<SelectListItem>)ViewBag.Level, new { @class = "searchable-dropdown-class form-control", @id = "Level", @required = "required" })
                    @Html.ValidationMessageFor(model => model.CourseAllocation.Level.Id, null, new { @class = "text-danger" })
                </div>

            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CourseAllocation.Course.Name, "Course", new { @class = "col-sm-2 control-label " })
                <div class="col-sm-10">
                    @Html.DropDownListFor(model => model.CourseAllocation.Course.Id, (IEnumerable<SelectListItem>)ViewBag.Course, new { @class = "searchable-dropdown-class form-control", @id = "Course", @required = "required" })
                    @Html.ValidationMessageFor(model => model.CourseAllocation.Course.Id, null, new { @class = "text-danger" })
                </div>

            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CourseAllocation.User.Username, "Staff", new { @class = "col-sm-2 control-label " })
                <div class="col-sm-10">
                    @Html.DropDownListFor(model => model.CourseAllocation.User.Id, (IEnumerable<SelectListItem>)ViewBag.User, new { @class = "searchable-dropdown-class form-control", @id = "User", @required = "required" })
                    @Html.ValidationMessageFor(model => model.CourseAllocation.User.Id, null, new { @class = "text-danger" })
                </div>

            </div>
            <div class="form-group">
                <div class="col-sm-2"></div>
                <div class="col-sm-10">
                    <input class="btn btn-success mr5 " type="submit" name="submit" id="submit" value="Allocate Course" />

                </div>
            </div>

        </div>
    </div>

}


